#!/bin/bash

# Script de d√©ploiement pour DocPDF Manager
# Usage: ./scripts/deploy.sh [environment]

set -e

ENVIRONMENT="${1:-development}"
COMPOSE_FILE="docker-compose.yml"

if [ "$ENVIRONMENT" = "production" ]; then
    COMPOSE_FILE="docker-compose.prod.yml"
fi

echo "üöÄ D√©ploiement DocPDF Manager (${ENVIRONMENT})"

# V√©rification des pr√©requis
echo "üìã V√©rification des pr√©requis..."

if [ ! -f .env ]; then
    echo "‚ùå Fichier .env manquant. Copiez .env.example vers .env et configurez-le."
    exit 1
fi

if [ ! -f "$COMPOSE_FILE" ]; then
    echo "‚ùå Fichier $COMPOSE_FILE manquant."
    exit 1
fi

# Sauvegarde avant d√©ploiement (en production)
if [ "$ENVIRONMENT" = "production" ]; then
    echo "üíæ Sauvegarde avant d√©ploiement..."
    ./scripts/backup.sh ./backups/pre-deploy
fi

# Arr√™t des services existants
echo "üõë Arr√™t des services existants..."
docker-compose -f "$COMPOSE_FILE" down

# Construction des images
echo "üî® Construction des images Docker..."
docker-compose -f "$COMPOSE_FILE" build --no-cache

# D√©marrage des services de base de donn√©es
echo "üóÑÔ∏è D√©marrage des services de base de donn√©es..."
docker-compose -f "$COMPOSE_FILE" up -d mongodb qdrant redis

# Attente de la disponibilit√© des services
echo "‚è≥ Attente de la disponibilit√© des services de base..."
sleep 30

# D√©marrage du service Docling
echo "üêç D√©marrage du service Docling..."
docker-compose -f "$COMPOSE_FILE" up -d docling-service

# Attente du service Docling
sleep 10

# D√©marrage du backend
echo "‚öôÔ∏è D√©marrage du backend..."
docker-compose -f "$COMPOSE_FILE" up -d backend

# Attente du backend
sleep 15

# D√©marrage du frontend
echo "üé® D√©marrage du frontend..."
docker-compose -f "$COMPOSE_FILE" up -d frontend

# D√©marrage de Nginx (si en production)
if [ "$ENVIRONMENT" = "production" ]; then
    echo "üåê D√©marrage de Nginx..."
    docker-compose -f "$COMPOSE_FILE" up -d nginx
fi

# V√©rification de la sant√© des services
echo "üè• V√©rification de la sant√© des services..."
sleep 20

# Test des endpoints de sant√©
services=("backend:3001" "docling-service:8000")

for service in "${services[@]}"; do
    service_name=$(echo $service | cut -d: -f1)
    port=$(echo $service | cut -d: -f2)
    
    if curl -s -f "http://localhost:${port}/health" > /dev/null; then
        echo "‚úÖ ${service_name} est op√©rationnel"
    else
        echo "‚ùå ${service_name} n'est pas accessible"
    fi
done

# Test du frontend
if curl -s -f "http://localhost:3000" > /dev/null; then
    echo "‚úÖ Frontend est accessible"
else
    echo "‚ùå Frontend n'est pas accessible"
fi

echo ""
echo "üéâ D√©ploiement termin√© !"
echo ""
echo "üìã Services d√©ploy√©s :"
echo "- Frontend: http://localhost:3000"
echo "- Backend API: http://localhost:3001"
echo "- Service Docling: http://localhost:8000"
echo "- MongoDB: localhost:27017"
echo "- Qdrant: http://localhost:6333"
echo "- Redis: localhost:6379"
echo ""
echo "üîß Commandes utiles :"
echo "- Logs: docker-compose -f $COMPOSE_FILE logs -f"
echo "- Status: docker-compose -f $COMPOSE_FILE ps"
echo "- Arr√™t: docker-compose -f $COMPOSE_FILE down"
echo ""

if [ "$ENVIRONMENT" = "production" ]; then
    echo "üîí Configuration de production :"
    echo "- Configurez SSL/TLS pour Nginx"
    echo "- V√©rifiez les sauvegardes automatiques"
    echo "- Configurez le monitoring"
fi
